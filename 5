package exam;

import java.util.*;

public class TopoSort {
    private int n; // number of vertices
    private List<Integer> adj[]; // adjacency list

    public TopoSort(int nodes) {
        n = nodes;
        adj = new LinkedList[n];
        for (int i = 0; i < n; i++)
            adj[i] = new LinkedList<>();
    }

    private void addEdge(int from, int to) {
        adj[from].add(to);
    }

    private void dfs(int node, boolean[] visited, Stack<Integer> stack) {
        visited[node] = true;
        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                dfs(neighbor, visited, stack);
            }
        }
        stack.push(node);
    }

    private void topoSort() {
        boolean[] visited = new boolean[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                dfs(i, visited, stack);
            }
        }

        System.out.println("Topological Sort:");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int nodes = sc.nextInt();
        TopoSort graph = new TopoSort(nodes);

        System.out.println("Enter the adjacency matrix:");
        for (int i = 0; i < nodes; i++) {
            for (int j = 0; j < nodes; j++) {
                if (sc.nextInt() == 1) {
                    graph.addEdge(i, j);
                }
            }
        }

        graph.topoSort();
        sc.close();
    }
}





2.

package exam;

import java.util.Scanner;
public class warshallalgo {
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);

System.out.print("Enter the number of vertices: ");
int vertices = scanner.nextInt();

int[][] graph = new int[vertices][vertices];
System.out.println("Enter the adjacency matrix (0 for no edge, 1 for edge):");
for (int i = 0; i < vertices; i++) {
for (int j = 0; j < vertices; j++) {
graph[i][j] = scanner.nextInt();
}
}

for (int k = 0; k < vertices; k++) {
for (int i = 0; i < vertices; i++) {
for (int j = 0; j < vertices; j++) {
graph[i][j] = graph[i][j] | (graph[i][k] & graph[k][j]);
}
}
}

System.out.println("Transitive Closure:");
for (int i = 0; i < vertices; i++) {
for (int j = 0; j < vertices; j++) {
System.out.print(graph[i][j] + " ");
}
System.out.println();
}
scanner.close();
}
}
