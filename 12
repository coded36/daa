import java.util.Scanner;

public class DijkstraAlgorithm {
    private int[] distance;
    private int[] previous;
    private int[] visited;

    public DijkstraAlgorithm(int numVertices) {
        distance = new int[numVertices];
        previous = new int[numVertices];
        visited = new int[numVertices];
    }

    // Dijkstra's algorithm
    public void findShortestPaths(int[][] graph, int source, int numVertices) {
        for (int i = 0; i < numVertices; i++) {
            distance[i] = Integer.MAX_VALUE; // initial distance
            previous[i] = -1; // no previous node
            visited[i] = 0; // not visited
        }

        distance[source] = 0;

        for (int i = 0; i < numVertices; i++) {
            int minDistance = Integer.MAX_VALUE;
            int currentVertex = -1;

            // Find the unvisited vertex with the smallest distance
            for (int j = 0; j < numVertices; j++) {
                if (visited[j] == 0 && distance[j] < minDistance) {
                    minDistance = distance[j];
                    currentVertex = j;
                }
            }

            visited[currentVertex] = 1;

            // Update distances for neighbors
            for (int neighbor = 0; neighbor < numVertices; neighbor++) {
                if (graph[currentVertex][neighbor] > 0 && visited[neighbor] == 0) {
                    int newDistance = distance[currentVertex] + graph[currentVertex][neighbor];
                    if (newDistance < distance[neighbor]) {
                        distance[neighbor] = newDistance;
                        previous[neighbor] = currentVertex;
                    }
                }
            }
        }
    }

    // Print the path from source to a vertex
    private void printPath(int vertex, int source) {
        if (vertex == source) {
            System.out.print(source);
            return;
        }
        if (previous[vertex] != -1) {
            printPath(previous[vertex], source);
            System.out.print(" -> " + vertex);
        }
    }

    // Display shortest paths from source to all vertices
    public void displayPaths(int source, int numVertices) {
        System.out.println("Shortest paths from vertex " + source + ":");
        for (int i = 0; i < numVertices; i++) {
            if (i != source) {
                System.out.print("To vertex " + i + ": ");
                printPath(i, source);
                System.out.println(" = " + distance[i]);
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int numVertices = scanner.nextInt();

        int[][] graph = new int[numVertices][numVertices];
        System.out.println("Enter the weighted adjacency matrix:");
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        System.out.print("Enter the source vertex: ");
        int source = scanner.nextInt();

        DijkstraAlgorithm dijkstra = new DijkstraAlgorithm(numVertices);
        dijkstra.findShortestPaths(graph, source, numVertices);
        dijkstra.displayPaths(source, numVertices);

        scanner.close();
    }
}
