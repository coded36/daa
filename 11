import java.util.Scanner;

public class Krushal {
    private int[] parent;

    // Constructor to initialize parent array
    public Krushal(int numVertices) {
        parent = new int[numVertices + 1]; // 1-based indexing
    }

    // Find the root of a vertex
    private int findRoot(int vertex) {
        while (parent[vertex] != 0) {
            vertex = parent[vertex];
        }
        return vertex;
    }

    // Join two sets
    private void joinSets(int root1, int root2) {
        if (root1 < root2) {
            parent[root1] = root2;
        } else {
            parent[root2] = root1;
        }
    }

    // Krushal's algorithm to find Minimum Spanning Tree
    public void findMST(int[][] graph, int numVertices) {
        int edgesAdded = 0;
        int totalCost = 0;

        while (edgesAdded < numVertices - 1) {
            int smallestWeight = Integer.MAX_VALUE;
            int vertex1 = -1, int vertex2 = -1;

            // Find the edge with the smallest weight
            for (int i = 1; i <= numVertices; i++) {
                for (int j = 1; j <= numVertices; j++) {
                    if (graph[i][j] < smallestWeight && i != j) {
                        smallestWeight = graph[i][j];
                        vertex1 = i;
                        vertex2 = j;
                    }
                }
            }

            int root1 = findRoot(vertex1);
            int root2 = findRoot(vertex2);

            // Include this edge if it doesn't form a cycle
            if (root1 != root2) {
                joinSets(root1, root2);
                System.out.println("Edge included: (" + vertex1 + "," + vertex2 + ") = " + smallestWeight);
                totalCost += smallestWeight;
                edgesAdded++;
            }

            // Mark edge as used
            graph[vertex1][vertex2] = graph[vertex2][vertex1] = Integer.MAX_VALUE;
        }

        System.out.println("Total cost of Minimum Spanning Tree = " + totalCost);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter number of vertices: ");
        int numVertices = scanner.nextInt();

        int[][] graph = new int[numVertices + 1][numVertices + 1]; // 1-based indexing

        System.out.println("Enter the weighted adjacency matrix:");
        for (int i = 1; i <= numVertices; i++) {
            for (int j = 1; j <= numVertices; j++) {
                graph[i][j] = scanner.nextInt();
            }
        }

        Krushal krushal = new Krushal(numVertices);
        krushal.findMST(graph, numVertices);

        scanner.close();
    }
}
