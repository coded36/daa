package exam;

public class BST {

    static class TreeNode {
        int value;
        TreeNode leftChild, rightChild;

        TreeNode(int value) {
            this.value = value;
        }
    }

    TreeNode root;

    void insert(int value) {
        root = insertRecursive(root, value);
    }

    TreeNode insertRecursive(TreeNode currentNode, int value) {
        if (currentNode == null)
            return new TreeNode(value);

        if (value < currentNode.value)
            currentNode.leftChild = insertRecursive(currentNode.leftChild, value);
        else if (value > currentNode.value)
            currentNode.rightChild = insertRecursive(currentNode.rightChild, value);

        return currentNode;
    }

    void delete(int value) {
        root = deleteRecursive(root, value);
    }

    TreeNode deleteRecursive(TreeNode currentNode, int value) {
        if (currentNode == null)
            return null;

        if (value < currentNode.value)
            currentNode.leftChild = deleteRecursive(currentNode.leftChild, value);
        else if (value > currentNode.value)
            currentNode.rightChild = deleteRecursive(currentNode.rightChild, value);
        else {
            // Node with one or no child
            if (currentNode.leftChild == null)
                return currentNode.rightChild;
            else if (currentNode.rightChild == null)
                return currentNode.leftChild;

            // Node with two children
            currentNode.value = findMinValue(currentNode.rightChild);
            currentNode.rightChild = deleteRecursive(currentNode.rightChild, currentNode.value);
        }
        return currentNode;
    }

    int findMinValue(TreeNode node) {
        while (node.leftChild != null)
            node = node.leftChild;
        return node.value;
    }

    void inorderTraversal() {
        inorderRecursive(root);
        System.out.println();
    }

    void inorderRecursive(TreeNode node) {
        if (node != null) {
            inorderRecursive(node.leftChild);
            System.out.print(node.value + " ");
            inorderRecursive(node.rightChild);
        }
    }

    public static void main(String[] args) {
        BST tree = new BST();
        int[] inputValues = {50, 30, 20, 40, 70, 60, 80};
        for (int val : inputValues)
            tree.insert(val);

        System.out.println("Inorder:");
        tree.inorderTraversal();

        System.out.println("Delete 20:");
        tree.delete(20);
        tree.inorderTraversal();

        System.out.println("Delete 30:");
        tree.delete(30);
        tree.inorderTraversal();
    }
}
