package exam;

import java.util.*;

public class subset15 {
    static boolean solve(int[] a, int s, ArrayList<Integer> sub) {
        int n = a.length;
        boolean[][] dp = new boolean[n + 1][s + 1];

        for (int i = 0; i <= n; i++) dp[i][0] = true;

        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= s; j++)
                dp[i][j] = (j >= a[i - 1]) ? dp[i - 1][j] || dp[i - 1][j - a[i - 1]] : dp[i - 1][j];

        if (!dp[n][s]) return false;

        int i = n, j = s;
        while (i > 0 && j > 0) {
            if (dp[i][j] && !dp[i - 1][j]) {
                sub.add(a[i - 1]);
                j -= a[i - 1];
            }
            i--;
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();
        int[] a = new int[n];

        System.out.println("Enter elements:");
        for (int i = 0; i < n; i++) a[i] = sc.nextInt();

        System.out.print("Enter target sum: ");
        int s = sc.nextInt();

        ArrayList<Integer> sub = new ArrayList<>();
        long st = System.nanoTime();
        boolean found = solve(a, s, sub);
        long et = System.nanoTime();

        System.out.println("Subset exists: " + found);
        if (found) System.out.println("Subset: " + sub);
        System.out.printf("Execution time: %.3f ms\n", (et - st) / 1e6);
        sc.close();
    }
}

